MEMORY
{
    rom(rx)   : ORIGIN = 0x0,       LENGTH = 0x8000
    ram_a(rw) : ORIGIN = 0x1000000, LENGTH = 0x2000
    ram_b(rw) : ORIGIN = 0x1800000, LENGTH = 0x2000
}
SECTIONS
{
    .boot : { *(.boot) 
        KEEP (*(.boot)) 
    } > rom
    .vectors 0x40 : {
        KEEP (*(.vectors))
    } > rom
    .srodata : { *(.srodata*) } > rom
    .isrs : { *(.isrs*)
        KEEP (*(.isrs))
    } > rom
    .text : { *(.text*) } > rom
    .rodata : { *(.rodata*) } > rom

    .peri : {
        . = ALIGN(4);
        __peri_data_start__ = .;
        *(.peri_data*)
        . = ALIGN(4);
        __peri_data_end__ = .;
        *(.peri_bss*)
    } > ram_a AT> rom
    __peri_lma = LOADADDR(.peri);


    .scratch 0x1000200 : {
        . += 0xc0;
    } > ram_a

    .data : { 
        . = ALIGN(4);
        __data_start__ = .;
        *(.sdata*) *(.data*) 
        . = ALIGN(4);
        __data_end__ = .;
    } > ram_a AT> rom
    __data_lma = LOADADDR(.data);

    .bss : { 
        . = ALIGN(4);
        __bss_start__ = .;
        *(.sbss*) *(.bss*)
        . = ALIGN(4);
        __bss_end__ = .;
    } > ram_a

    .heap (NOLOAD):
    {
        __HeapStart = .;
        KEEP(*(.heap*))
        __HeapLimit = .;
    } > ram_b

    __global_pointer$ = 0x1000400;
    __StackTop = ORIGIN(ram_a) + LENGTH(ram_a);
    __StackLimit = __StackTop - 0x1000;
    ASSERT(__StackLimit >= __bss_end__, "region RAM overflowed")
}
